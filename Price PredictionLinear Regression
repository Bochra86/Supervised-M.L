import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.linear_model import ElasticNet
from sklearn.metrics import mean_squared_error

# Step 1: Load the dataset (Ames Housing dataset)
url = "https://raw.githubusercontent.com/selva86/datasets/master/AmesHousing.csv"
data = pd.read_csv(url)

# Step 2: Preprocessing - Handle missing values
# Separate target and features
X = data.drop(columns=["SalePrice"])  # Features
y = data["SalePrice"]  # Target variable

# Select numerical and categorical columns
num_cols = X.select_dtypes(include=["float64", "int64"]).columns
cat_cols = X.select_dtypes(include=["object"]).columns

# Step 3: Define Preprocessing Steps
# For numerical columns: Impute missing values, then scale
num_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='mean')),  # Handle missing values by replacing with mean
    ('scaler', StandardScaler())                  # Feature scaling
])

# For categorical columns: Impute missing values, then one-hot encode
cat_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='most_frequent')),  # Handle missing values
    ('onehot', OneHotEncoder(handle_unknown='ignore'))     # One-hot encoding
])

# Combine numerical and categorical transformers
preprocessor = ColumnTransformer(transformers=[
    ('num', num_transformer, num_cols),
    ('cat', cat_transformer, cat_cols)
])

# Step 4: Define ElasticNet model
elasticnet_model = ElasticNet(alpha=0.1, l1_ratio=0.5)  # Combination of L1 and L2 regularization

# Step 5: Build Pipeline
elasticnet_pipeline = Pipeline(steps=[('preprocessor', preprocessor), ('model', elasticnet_model)])

# Step 6: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 7: Cross-Validation and Training
elasticnet_cv_scores = cross_val_score(elasticnet_pipeline, X_train, y_train, cv=5, scoring='neg_mean_squared_error')

# Convert negative MSE to positive RMSE
elasticnet_rmse_scores = np.sqrt(-elasticnet_cv_scores)
print("ElasticNet Regression RMSE (Cross-Validation):", np.mean(elasticnet_rmse_scores))

# Step 8: Final Model Training and Evaluation on Test Set
elasticnet_pipeline.fit(X_train, y_train)

# Predictions on Test Set
elasticnet_preds = elasticnet_pipeline.predict(X_test)

# Evaluate ElasticNet on Test Set
elasticnet_rmse = np.sqrt(mean_squared_error(y_test, elasticnet_preds))
print("ElasticNet Regression RMSE on Test Set:", elasticnet_rmse)
